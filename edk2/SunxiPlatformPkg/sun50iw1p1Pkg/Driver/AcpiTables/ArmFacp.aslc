/** @file
*
*  Copyright (c) 2007-2014, Allwinner Technology Co., Ltd. All rights reserved.
*  http://www.allwinnertech.com
*
*  Martin.Zheng <martinzheng@allwinnertech.com>
*  
*  This program and the accompanying materials                          
*  are licensed and made available under the terms and conditions of the BSD License         
*  which accompanies this distribution.  The full text of the license may be found at        
*  http://opensource.org/licenses/bsd-license.php                                            
*
*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
*
**/
 
#include "ArmPlatform.h"

EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE FACP = {
  {
	  EFI_ACPI_1_0_FIXED_ACPI_DESCRIPTION_TABLE_SIGNATURE,
	  sizeof (EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE),
	  EFI_ACPI_5_0_FIXED_ACPI_DESCRIPTION_TABLE_REVISION,
	  0,                // to make sum of entire table == 0
	  EFI_ACPI_OEM_ID,            // OEMID is a 6 bytes long field
	  EFI_ACPI_OEM_TABLE_ID,      // OEM table identification(8 bytes long)
	  EFI_ACPI_OEM_REVISION,      // OEM revision number
	  EFI_ACPI_CREATOR_ID,        // Creator vendor ID
	  EFI_ACPI_CREATOR_REVISION  // Creator revision number
  },
  0,                // Physical addesss of FACS; Not used on ARM
  0,                // Physical address of DSDT
  RESERVED,         // reserved
  PM_PROFILE,	    // Platform profile (i.e. type)
  SCI_INT_VECTOR,   // System vector of SCI interrupt; Not used on ARM
  SMI_CMD_IO_PORT,  // Port address of SMI command port; Not used on ARM
  ACPI_ENABLE,      // value to write to port smi_cmd to enable ACPI; Not used on ARM
  ACPI_DISABLE,     // value to write to port smi_cmd to disable ACPI; Not used on ARM
  S4BIOS_REQ,       // Value to write to SMI CMD port to enter the S4BIOS state; Not used on ARM
  0x00,             // PState control; Not used on ARM
  PM1a_EVT_BLK,     // Port address of Power Mgt 1a Event Reg Blk; Not used on ARM
  PM1b_EVT_BLK,     // Port address of Power Mgt 1b Event Reg Blk; Not used on ARM
  PM1a_CNT_BLK,     // Port address of Power Mgt 1a Ctrl Reg Blk; Not used on ARM
  PM1b_CNT_BLK,     // Port address of Power Mgt 1b Ctrl Reg Blk; Not used on ARM
  PM2_CNT_BLK,      // Port address of Power Mgt 2  Ctrl Reg Blk; Not used on ARM
  PM_TMR_BLK,       // Port address of Power Mgt Timer Ctrl Reg Blk; Not used on ARM
  GPE0_BLK,         // Port addr of General Purpose Event 0 Reg Blk; Not used on ARM
  GPE1_BLK,         // Port addr of General Purpose Event 1 Reg Blk; Not used on ARM
  PM1_EVT_LEN,      // Byte Length of ports at pm1X_evt_blk; Not used on ARM
  PM1_CNT_LEN,      // Byte Length of ports at pm1X_cnt_blk; Not used on ARM
  PM2_CNT_LEN,      // Byte Length of ports at pm2_cnt_blk; Not used on ARM
  PM_TM_LEN,        // Byte Length of ports at pm_tm_blk; Not used on ARM
  GPE0_BLK_LEN,     // Byte Length of ports at gpe0_blk; Not used on ARM
  GPE1_BLK_LEN,     // Byte Length of ports at gpe1_blk; Not used on ARM
  GPE1_BASE,        // offset in gpe model where gpe1 events start; Not used on ARM
  0xE3,             // _CST support; Not used on ARM
  P_LVL2_LAT,       // worst case HW latency to enter/exit C2 state; Not used on ARM
  P_LVL3_LAT,       // worst case HW latency to enter/exit C3 state; Not used on ARM
  FLUSH_SIZE,       // Size of area read to flush caches; Not used on ARM
  FLUSH_STRIDE,     // Stride used in flushing caches; Not used on ARM
  DUTY_OFFSET,      // bit location of duty cycle field in p_cnt reg; Not used on ARM
  DUTY_WIDTH,       // bit width of duty cycle field in p_cnt reg; Not used on ARM
  DAY_ALRM,         // index to day-of-month alarm in RTC CMOS RAM; Not used on ARM
  MON_ALRM,         // index to month-of-year alarm in RTC CMOS RAM; Not used on ARM
  CENTURY,          // index to century in RTC CMOS RAM; Not used on ARM
  0x003C,		       // Boot architecture flag (low Byte); This value (3C) is for ARM,Boot architecture flag (high byte), must be zero
  RESERVED,         // reserved 
  FLAG,		          // For ARM: Put ACPI into reduced hardware mode and Low-Power Idle mode
  0,0,0,0,0,
  0,
  0,
  0,
  0,
  0,0,0,0,0,
  0
};

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the 
  // data structure from the exeutable
  //
  return (VOID*)&FACP;
}
