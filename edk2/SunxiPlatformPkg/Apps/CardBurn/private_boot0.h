/** @file
*
*  Copyright (c) 2007-2014, Allwinner Technology Co., Ltd. All rights reserved.
*  http://www.allwinnertech.com
*
*  Jerry Wang <wangflord@allwinnertech.com>
*  
*  This program and the accompanying materials                          
*  are licensed and made available under the terms and conditions of the BSD License         
*  which accompanies this distribution.  The full text of the license may be found at        
*  http://opensource.org/licenses/bsd-license.php                                            
*
*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
*
**/


#ifndef  __boot0_v2_h
#define  __boot0_v2_h


#include "spare_head.h"

#define BOOT0_MAGIC                     "eGON.BT0"

#define SYS_PARA_LOG                    0x4d415244
/******************************************************************************/
/*                              file head of Boot                             */
/******************************************************************************/
typedef struct _Boot_file_head
{
  __u32  jump_instruction;   // one intruction jumping to real code
  __u8   magic[MAGIC_SIZE];  // ="eGON.BT0"
  __u32  check_sum;          // generated by PC
  __u32  length;             // generated by PC
  __u32  pub_head_size;      // the size of boot_file_head_t
  __u8   pub_head_vsn[4];    // the version of boot_file_head_t
  __u32  ret_addr;           // the return value
  __u32  run_addr;           // run addr
  __u8   eGON_vsn[4];        // eGON version
  __u8   platform[8];        // platform information
}boot_file_head_t;
/******************************************************************************/
/*                              file head of Boot0                            */
/******************************************************************************/
typedef struct _boot0_private_head_t
{
  __u32                       prvt_head_size;
  char                        prvt_head_vsn[4];       // the version of boot0_private_head_t
  unsigned int                dram_para[32];;         // DRAM patameters for initialising dram. Original values is arbitrary,
  __s32           uart_port;              // UART控制器编号
  normal_gpio_cfg             uart_ctrl[2];           // UART控制器(调试打印口)数据信息
  __s32                       enable_jtag;            // 1 : enable,  0 : disable
  normal_gpio_cfg             jtag_gpio[5];           // 保存JTAG的全部GPIO信息
  normal_gpio_cfg             storage_gpio[32];       // 存储设备 GPIO信息
  char                        storage_data[512 - sizeof(normal_gpio_cfg) * 32];      // 用户保留数据信息
  //boot_nand_connect_info_t    nand_connect_info;
}boot0_private_head_t;

typedef struct _boot0_file_head_t
{
  boot_file_head_t      boot_head;
  boot0_private_head_t  prvt_head;
}boot0_file_head_t;

#endif     //  ifndef __boot0_h

/* end of boot0.h */
