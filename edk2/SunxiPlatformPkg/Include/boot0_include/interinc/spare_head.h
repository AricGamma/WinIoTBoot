/** @file
*
*  Copyright (c) 2007-2014, Allwinner Technology Co., Ltd. All rights reserved.
*  http://www.allwinnertech.com
*
*  Martin.Zheng <martinzheng@allwinnertech.com>
*  
*  This program and the accompanying materials                          
*  are licensed and made available under the terms and conditions of the BSD License         
*  which accompanies this distribution.  The full text of the license may be found at        
*  http://opensource.org/licenses/bsd-license.php                                            
*
*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                     
*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.             
*
**/

#ifndef  __spare_head1_h__
#define  __spare_head1_h__

#include "egon_def.h"

/* work mode */
#define WORK_MODE_PRODUCT      (1<<4)
#define WORK_MODE_UPDATE       (1<<5)

#define WORK_MODE_BOOT      0x00  //正常启动
#define WORK_MODE_USB_PRODUCT 0x10  //用于USB量产
#define WORK_MODE_CARD_PRODUCT  0x11  //用于卡量产
#define WORK_MODE_USB_UPDATE  0x20  //用于USB升级
#define WORK_MODE_OUTER_UPDATE  0x21  //用于外部盘升级

#define UBOOT_MAGIC       "uboot"
#define STAMP_VALUE             0x5F0A6C39
#define ALIGN_SIZE        8 * 1024

#define BOOT1_START_SECTOR_IN_SDMMC    38192
/******************************************************************************/
/*               the control information stored in file head                  */
/******************************************************************************/
struct spare_boot_ctrl_head
{
  unsigned int  jump_instruction;   // one intruction jumping to real code
  unsigned char magic[8];           // ="u-boot"
  unsigned int  check_sum;          // generated by PC
  unsigned int  align_size;     // align size in byte
  unsigned int  length;             // the size of all file
  unsigned int  uboot_length;       // the size of uboot
  unsigned char version[8];         // uboot version
  unsigned char platform[8];        // platform information
  int           reserved[1];        //stamp space, 16bytes align
};

/******************************************************************************/
/*                          the data stored in file head                      */
/******************************************************************************/
struct spare_boot_data_head
{
  unsigned int        dram_para[32];
  int             run_clock;        // Mhz
  int             run_core_vol;     // mV
  int             uart_port;              // UART控制器编号
  normal_gpio_cfg             uart_gpio[2];           // UART控制器(调试打印口)GPIO信息
  int             twi_port;               // TWI控制器编号
  normal_gpio_cfg             twi_gpio[2];            // TWI控制器GPIO信息，用于控制TWI
  int                       work_mode;              // 工作模式
  int                         storage_type;           // 存储介质类型  0：nand   1：sdcard    2: spinor
  normal_gpio_cfg             nand_gpio[32];          // nand GPIO信息
  char            nand_spare_data[256]; // nand 额外信息
  normal_gpio_cfg             sdcard_gpio[32];    // sdcard GPIO信息
  char                  sdcard_spare_data[256]; // sdcard 额外信息
  int             reserved[2];      // 保留数据位, 16bytes align
};

typedef struct spare_boot_head_t
{
  struct spare_boot_ctrl_head    boot_head;
  struct spare_boot_data_head    boot_data;
}
uboot_file_head;


#endif

